{% macro compiler_entry(compiler_spec, environment, stack_type=None, prefix=None) -%}
  {% set compiler_w_version = compiler_spec | filter_variant | filter_compiler_name %}
  {% set _compiler =  compiler_w_version | regex_replace('@[0-9.]*','') %}
  {% if stack_type != None %}
    {% set stack = environment[stack_type][_compiler] %}
  {% endif %}
  {% set _is_installed =  _compiler | compiler_component('is_installed',  environment,
     stack_type, prefix=prefix) %}
  {% macro add_variable(var_name, compiler, component) -%}
    {% set dirs = compiler | compiler_component(component, environment, stack_type, prefix=prefix) | list_if_not %}
    {% for path in dirs %}
        {{var_name}}: {{ path }}
    {% endfor %}
  {%- endmacro -%}
  {% if _is_installed %}
- compiler:
    spec: {{ compiler_w_version }}
    paths:
      cc:  {{ _compiler | compiler_component('cc',  environment,
              stack_type, prefix=prefix) }}
      cxx: {{ _compiler | compiler_component('c++', environment,
              stack_type, prefix=prefix) }}
      f77: {{ _compiler | compiler_component('f77', environment,
              stack_type, prefix=prefix) }}
      fc:  {{ _compiler | compiler_component('f90', environment,
              stack_type, prefix=prefix) }}
  {% if stack and 'compiler_cflags' in stack or 'compiler_cxxflags' in stack %}
    flags: 
      cflags: {{ stack.compiler_cflags }}
      cxxflags: {{ stack.compiler_cxxflags }}
  {% else %}
    flags: {}
  {% endif %}
    operating_system: {{ environment.os | regex_replace('([a-z]+[0-9]+)(\.[0-9]+)+', '\\1') }}
    target: x86_64
    modules: []
    environment:
      {% if _compiler == 'intel' or _compiler == 'gcc' or _compiler == 'clang' or _compiler == 'oneapi' %}
      prepend_path:
{{ add_variable('PATH', _compiler,  'bindir') -}}
{{ add_variable('LD_LIBRARY_PATH', _compiler,  'libdir') -}}
        {% if _compiler == 'oneapi' %}
{{ add_variable('CPATH', _compiler,  'incdir') -}}
        {% endif %}
      {% endif %}
      unset: []
    extra_rpaths: []
  {% endif %}
{%- endmacro %}

{{ compiler_entry(environment.core_compiler, environment, prefix='/usr') }}

{% if not environment.bootstrap %}
  {% for _type in environment.stack_types %}
    {% for _compiler, stack in environment[_type].items() %}
      {% if _compiler in environment.compilers  and 'compiler_prefix' in stack %}
{{ compiler_entry(stack.compiler, environment, stack_type=_type) }}
      {% endif %}
      {% if 'core_compiler' in stack %}
        {% set core_compiler_prefix = stack['core_compiler'] | spack_path %}
{{ compiler_entry(stack['core_compiler'], environment, prefix=core_compiler_prefix) }}
      {% endif %}
    {% endfor %}
  {% endfor %}
{% endif %}
  
{% set compilers_site_template = 'templates/' + site + '/' + stack_release + '/compilers.yaml.j2' %}
{% if compilers_site_template | exists %}
{% include compilers_site_template | indent %}
{% endif %}
