pipeline {
    agent {
        label 'fidis-login'
    }

    // Adds timestamps to console logs
    options {
        timestamps()
        ansiColor('xterm')
    }

    environment {
        STACK_RELEASE = "arvine"
        SENV_VIRTUALENV_PATH = "/home/scitasbuild/${STACK_RELEASE}/virtualenv/senv-py27"
        //DRY_RUN= "yes"
        STACK_PREFIX = get_prefix(env.GIT_BRANCH, env.STACK_RELEASE)
    }

    stages {
        stage('Update production configuration') {
            // Prepare a release branch of Spack for deployment by:
            steps {
                // Update the command line tool we use in production
                // and configuration files
                sh 'jenkins/deploy/scripts/update_production_configuration.sh'

                // Check that senv is operational
                sh 'jenkins/senv.sh status'

                // Checkout Spack
                sh 'jenkins/senv.sh spack-checkout'

                // Checkout extra packages sources;
                sh 'jenkins/senv.sh spack-checkout-extra-repos'
            }
        }

        stage('Check environment') {
            steps {
                sh 'env | sort'
            }
        }

        stage('Create environments') {
            steps {
                sh 'jenkins/deploy/scripts/create_environments.sh yes'
            }
        }

        stage('Prepare production stack') {
            // Ensure that all the compilers that are needed in
            // production are in place.
            steps {
                script {
                    parallel(prepare_compilers())
                }
            }
        }

        stage('Create environments (after compiler installed)') {
            steps {
                sh 'jenkins/deploy/scripts/create_environments.sh no'
            }
        }

        stage('Conctretize') {
            steps {
                script {
                    parallel(concretize())
                }
            }
        }

        stage('Populate mirror') {
            // TODO: the agent below must have access to the network
            steps {
                sh 'jenkins/deploy/scripts/populate_mirror.sh'
            }
        }

        stage('Deploy software') {
             // Deploy the software that is planned to be in the environment,
            // but not yet installed. Notify failures.
            steps {
                script {
                    parallel(deploy_envs())
                }
            }
        }

        stage('Activate packages') {
             // Deploy the software that is planned to be in the environment,
            // but not yet installed. Notify failures.
            steps {
                script {
                    parallel(activate_packages())
                }
            }
        }
    }
}

def get_prefix(branch_name, stack_name) {
    def pattern = ~"origin/(packages|bugfix|features)/$stack_name/"
    if ("${branch_name}" =~ pattern) {
        println("PR detected")
        return "${env.HOME}/${stack_name}/pr/${env.BUILD_TAG}"
    }
    println("NO PR detected for branch ${branch_name}")
    return ""
}

def get_agent_name(environment) {
    env.environment = environment
    slurm_version_ = sh (
        script: 'jenkins/senv.sh get-environment-entry --env ${environment} environment.slurm  | sed -e \'s/\\([0-9]*\\)\\.\\([0-9]*\\).*/\\1\\2/\'',
        returnStdout: true
    )
    slurm_version = slurm_version_.trim()

    os_version_ = sh (
            script:'jenkins/senv.sh get-environment-entry --env ${environment} environment.os | sed -e \'s/\\([a-z0-9]*\\)\\(\\.\\([0-9]*\\)*\\)/\\1/\'',
            returnStdout: true
    )
    os_version = os_version_.trim()
    
    agent_name = "${environment}-${STACK_RELEASE}-${os_version}-slurm${slurm_version}"

    return agent_name
}

def _define_stages(prefix, script, message, do_junit = true) {
    def environments = "${sh (script: 'jenkins/senv.sh --input ${STACK_RELEASE}.yaml list-envs', returnStdout: true).trim()}".split('\n')

    def jobs = [:]
    for (def environment in environments) {
        def agent_name = get_agent_name(environment)

        jobs["${prefix}-${agent_name}"] = {
            stage("${prefix}-${agent_name}") {
                node(agent_name) {
                    env.environment = environment
                    env.environment = script
                    def result = ''
                    checkout scm
                    try {
                        ansiColor('xterm') {
                            sh  '${script} ${environment}'
                        }
                    } catch(error) {
                        result = error
                        currentBuild.result = 'FAILURE'
                        mattermostSend color: 'warning',
                            message: "${message} failed for ${environment}. ${env.BUILD_URL} with error ${error}"
                    }
                    archiveArtifacts artifacts:'*.txt, *.xml',
                        allowEmptyArchive: true
                    if (do_junit) {
                        junit testResults:'*.xml',
                            allowEmptyResults: true
                    }
                    if (result) {
                        throw(error)
                    }
                }
            }
        }
    }
    return jobs
}

def prepare_compilers() {
    return _define_stages('compilers',
                          'jenkins/deploy/scripts/install_production_compilers.sh',
                          'Prepare production stack')
}

def deploy_envs() {
    return _define_stages('deploy',
                          'jenkins/deploy/scripts/install_production_stack.sh',
                          'Deployement of production stack')
}

def activate_packages() {
    return _define_stages('activate',
                          'jenkins/deploy/scripts/activate_packages.sh',
                          'Activation of packages',
                          false)
}

def concretize() {
    return _define_stages('concretize',
                          'jenkins/deploy/scripts/concretize.sh',
                          'Concretization of stack')
}
